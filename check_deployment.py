#!/usr/bin/env python3
"""
Script de verificaci√≥n para despliegue en Render
Verifica que todos los componentes del sistema de cach√© est√©n listos
"""

import os
import sys
import importlib

def check_requirements():
    """Verifica que todas las dependencias est√©n instaladas"""
    print("üîç Verificando dependencias...")
    
    required_packages = [
        'flask',
        'flask_cors', 
        'flask_caching',
        'pymongo',
        'pytz',
        'gunicorn'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - NO INSTALADO")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå Faltan dependencias: {', '.join(missing_packages)}")
        print("Ejecuta: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Todas las dependencias est√°n instaladas")
    return True

def check_files():
    """Verifica que todos los archivos necesarios existan"""
    print("\nüîç Verificando archivos...")
    
    required_files = [
        'app.py',
        'cache_manager.py',
        'api_historico.py',
        'production_config.py',
        'requirements.txt',
        'Dockerfile',
        'build.sh'
    ]
    
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - NO ENCONTRADO")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå Faltan archivos: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ Todos los archivos est√°n presentes")
    return True

def check_cache_config():
    """Verifica la configuraci√≥n del cach√©"""
    print("\nüîç Verificando configuraci√≥n de cach√©...")
    
    try:
        from app import app, cache
        print("‚úÖ Flask app y cach√© inicializados correctamente")
        
        # Verificar configuraci√≥n
        cache_type = app.config.get('CACHE_TYPE')
        cache_timeout = app.config.get('CACHE_DEFAULT_TIMEOUT')
        cache_prefix = app.config.get('CACHE_KEY_PREFIX')
        
        print(f"   - Tipo de cach√©: {cache_type}")
        print(f"   - Timeout: {cache_timeout} segundos")
        print(f"   - Prefijo: {cache_prefix}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n de cach√©: {e}")
        return False

def check_imports():
    """Verifica que todos los imports funcionen"""
    print("\nüîç Verificando imports...")
    
    try:
        from cache_manager import (
            get_current_date,
            get_historical_data_with_cache,
            get_current_data_only
        )
        print("‚úÖ cache_manager imports correctos")
        
        from production_config import (
            get_production_cache_config,
            is_production
        )
        print("‚úÖ production_config imports correctos")
        
        from api_historico import historico_bp
        print("‚úÖ api_historico imports correctos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en imports: {e}")
        return False

def check_endpoints():
    """Verifica que los endpoints de cach√© est√©n disponibles"""
    print("\nüîç Verificando endpoints de cach√©...")
    
    try:
        from app import app
        
        # Verificar que el blueprint est√© registrado
        if 'historico' in app.blueprints:
            print("‚úÖ Blueprint historico registrado")
        else:
            print("‚ùå Blueprint historico NO registrado")
            return False
        
        # Verificar rutas espec√≠ficas del cach√©
        routes = [rule.rule for rule in app.url_map.iter_rules()]
        
        cache_endpoints = [
            '/api/dashboard/cache/status',
            '/api/dashboard/cache/clear'
        ]
        
        for endpoint in cache_endpoints:
            if endpoint in routes:
                print(f"‚úÖ {endpoint}")
            else:
                print(f"‚ùå {endpoint} - NO ENCONTRADO")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando endpoints: {e}")
        return False

def check_environment():
    """Verifica variables de entorno"""
    print("\nüîç Verificando variables de entorno...")
    
    # Variables opcionales pero importantes
    env_vars = [
        'MONGODB_URI',
        'FLASK_ENV',
        'RENDER'
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var} = {value}")
        else:
            print(f"‚ö†Ô∏è  {var} - NO DEFINIDA (opcional)")
    
    return True

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("=== VERIFICACI√ìN DE DESPLIEGUE ===")
    print("MeteoSarria - Sistema de Cach√© Inteligente")
    print("")
    
    checks = [
        check_requirements,
        check_files,
        check_cache_config,
        check_imports,
        check_endpoints,
        check_environment
    ]
    
    all_passed = True
    
    for check in checks:
        if not check():
            all_passed = False
    
    print("\n" + "="*50)
    
    if all_passed:
        print("üéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("‚úÖ El sistema est√° listo para desplegar en Render")
        print("")
        print("üìã Pasos para el despliegue:")
        print("   1. git add .")
        print("   2. git commit -m 'Add intelligent cache system'")
        print("   3. git push origin main")
        print("   4. Render detectar√° los cambios y desplegar√° autom√°ticamente")
        print("")
        print("üîß Configuraci√≥n en Render:")
        print("   - Build Command: pip install -r requirements.txt")
        print("   - Start Command: gunicorn --bind 0.0.0.0:$PORT app:app")
        print("   - Health Check: /api/dashboard/test")
        print("")
        print("üìä Beneficios esperados en producci√≥n:")
        print("   - 95-98% mejora en consultas repetidas")
        print("   - 90% reducci√≥n en consultas a MongoDB")
        print("   - Cach√© optimizado para Render")
        print("   - Datos actuales siempre frescos")
        
    else:
        print("‚ùå ALGUNAS VERIFICACIONES FALLARON")
        print("üîß Corrige los errores antes de desplegar")
        sys.exit(1)

if __name__ == "__main__":
    main() 